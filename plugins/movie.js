/*
‚ïî‚ïê‚ï¶‚ïê‚ï¶‚ïó‚îÄ‚ïî‚ï¶‚ïê‚ï¶‚ïó‚ïî‚ïê‚ïê‚ï¶‚ïê‚ïê‚ï¶‚ïê‚ïó‚ïî‚ïê‚ï¶‚ïê‚ï¶‚ïê‚ïê‚ïó
‚ïë‚ïë‚ïë‚ïë‚ïë‚ïö‚ï¶‚ïù‚ïë‚ï¶‚ï£‚ïë‚ïë‚ïî‚ïó‚ïë‚ïê‚ïê‚ï£‚ï¶‚ïù‚ïë‚ïë‚ïë‚ïë‚ï†‚ïó‚ïó‚ïë
‚ïë‚ïë‚ïë‚ïë‚ï†‚ïó‚ïë‚ïî‚ï£‚ï©‚ï£‚ïö‚ï£‚ï†‚ï£‚ï†‚ïê‚ïê‚ïë‚ï©‚ïó‚ïë‚ïë‚ïë‚ïë‚ï†‚ï©‚ïù‚ïë
‚ïö‚ï©‚ïê‚ï©‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ï©‚ïê‚ï©‚ïù‚ïö‚ï©‚ïê‚ïê‚ï©‚ïê‚ïù‚ïö‚ï©‚ïê‚ï©‚ï©‚ïê‚ïê‚ïù
*/



const axios = require('axios');
const { cmd } = require('../command');
const config = require('../config'); // Ensure your API key is in config

// Command to fetch movie details
cmd({
    pattern: "movie",
    desc: "Fetch detailed information about a movie.",
    category: "utility",
    react: "üéûÔ∏è",
    filename: __filename
}, async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        const movieName = args.join(' ');
        if (!movieName) {
            return reply("üìΩÔ∏è Please provide the name of the movie.");
        }

        const apiUrl = `http://www.omdbapi.com/?t=${encodeURIComponent(movieName)}&apikey=${config.OMDB_API_KEY}`;
        const response = await axios.get(apiUrl);
        const data = response.data;

        if (data.Response === "False") {
            return reply("! Movie not found.");
        }

        const movieInfo = `
*üé¨ ùë¥ùëΩùë¨ùë≥ùë®ùë∫ùë¨ ùë¥ùë´ ùë¥ùë∂ùëΩùë∞ùë¨ ùë´ùë∂ùëæùëµùë≥ùë∂ùë®ùë´ùë¨ùëπ üé¨*

*üìçùëªùë∞ùëªùë≥ùë¨:* ${data.Title}
*üìçùíÄùë¨ùë®ùëπ:* ${data.Year}
*üìçùëπùë®ùëªùë¨ùë´:* ${data.Rated}
*üìçùëπùë¨ùë≥ùë¨ùë®ùë∫ùë¨ùë´ ùë´ùë®ùëªùë¨:* ${data.Released}
*üìçùë¥ùë∂ùëΩùë∞ùë¨ ùëπùëºùëµùëªùë∞ùë¥ùë¨:* ${data.Runtime}
*üìçùë¥ùë∂ùëΩùë∞ùë¨ ùëÆùë¨ùëµùëπùë¨:* ${data.Genre}
*üìçùë´ùë∞ùëπùë¨ùë™ùëªùë∂ùëπ:* ${data.Director}
*üìçùëæùëπùë∞ùëªùë¨ùëπ:* ${data.Writer}
*üìçùë®ùë™ùëªùë∂ùëπùë∫:* ${data.Actors}
*üìçùë¥ùë∂ùëΩùë∞ùë¨ ùë≥ùë®ùëµùëÆùëºùë®ùëÆùë¨:* ${data.Language}
*üìçùë™ùë∂ùëºùëµùëªùëπùíÄ:* ${data.Country}
*üìçùë®ùëæùë®ùëπùë´ùë∫:* ${data.Awards}
*üìçùë∞ùë¥ùë´ùë©:* ${data.imdbRating}
`;

        const imageUrl = data.Poster && data.Poster !== 'N/A' ? data.Poster : config.ALIVE_IMG;

        await conn.sendMessage(from, {
            image: { url: imageUrl },
            caption: `${movieInfo}\n> UMAR`
        }, { quoted: mek });
    } catch (e) {
        console.error(e);
        reply(`‚ùå Error: ${e.message}`);
    }
});
